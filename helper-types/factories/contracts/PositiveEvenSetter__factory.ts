/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PositiveEvenSetter,
  PositiveEvenSetterInterface,
} from "../../contracts/PositiveEvenSetter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_oddNumber",
        type: "uint256",
      },
    ],
    name: "SetEvenToOddNumber",
    type: "error",
  },
  {
    inputs: [],
    name: "SetPositiveNumberToZero",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_prevPositiveEven",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_newPositiveEven",
        type: "uint256",
      },
    ],
    name: "PositiveEvenSet",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "positiveEven",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_positiveEven",
        type: "uint256",
      },
    ],
    name: "setPositiveEven",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b91906101a6565b60405180910390fd5b610093816100a160201b60201c565b5060026001819055506101c1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019082610165565b9050919050565b6101a081610185565b82525050565b60006020820190506101bb6000830184610197565b92915050565b6105d4806101d06000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806308eb4bc31461005c578063715018a6146100785780638da5cb5b14610082578063d3a1c071146100a0578063f2fde38b146100be575b600080fd5b61007660048036038101906100719190610409565b6100da565b005b6100806101b2565b005b61008a6101c6565b6040516100979190610477565b60405180910390f35b6100a86101ef565b6040516100b591906104a1565b60405180910390f35b6100d860048036038101906100d391906104e8565b6101f5565b005b6100e261027b565b6000810361011c576040517fb00d259400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028261012b9190610544565b1461016d57806040517fcff917b900000000000000000000000000000000000000000000000000000000815260040161016491906104a1565b60405180910390fd5b7fc710b576f0e4b3f7a795b1879c5fbe339c5fbc5542f03ba09cb81254ef870ee8600154826040516101a0929190610575565b60405180910390a18060018190555050565b6101ba61027b565b6101c46000610302565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60015481565b6101fd61027b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361026f5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016102669190610477565b60405180910390fd5b61027881610302565b50565b6102836103c6565b73ffffffffffffffffffffffffffffffffffffffff166102a16101c6565b73ffffffffffffffffffffffffffffffffffffffff1614610300576102c46103c6565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102f79190610477565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6103e6816103d3565b81146103f157600080fd5b50565b600081359050610403816103dd565b92915050565b60006020828403121561041f5761041e6103ce565b5b600061042d848285016103f4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061046182610436565b9050919050565b61047181610456565b82525050565b600060208201905061048c6000830184610468565b92915050565b61049b816103d3565b82525050565b60006020820190506104b66000830184610492565b92915050565b6104c581610456565b81146104d057600080fd5b50565b6000813590506104e2816104bc565b92915050565b6000602082840312156104fe576104fd6103ce565b5b600061050c848285016104d3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061054f826103d3565b915061055a836103d3565b92508261056a57610569610515565b5b828206905092915050565b600060408201905061058a6000830185610492565b6105976020830184610492565b939250505056fea26469706673582212206448c8ad868d31b3a0f5d12881f9a3e1188d5fc68f19086f69758366b06d7ced64736f6c634300081b0033";

type PositiveEvenSetterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PositiveEvenSetterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PositiveEvenSetter__factory extends ContractFactory {
  constructor(...args: PositiveEvenSetterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PositiveEvenSetter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PositiveEvenSetter__factory {
    return super.connect(runner) as PositiveEvenSetter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositiveEvenSetterInterface {
    return new Interface(_abi) as PositiveEvenSetterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PositiveEvenSetter {
    return new Contract(address, _abi, runner) as unknown as PositiveEvenSetter;
  }
}
